# frozen_string_literal: true

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# noinspection JRubyUnusedImportInspection
import './util/util.rb'

# Optional: Change default platform if needed
default_platform(:android)

before_all do |_, _|
  enforced_branch = ENV['FL_ENFORCED_BRANCH']
  UI.important('Fastlane is being run in a CI service, but no branch was enforced') if is_ci && !enforced_branch

  ensure_git_branch(branch: enforced_branch) if enforced_branch
  ensure_git_status_clean
  git_pull if enforced_branch

  # Optional: Execute extra actions after this line
  # List of all available actions: https://docs.fastlane.tools/actions
end

platform :android do
  desc 'Build an application for development (βeta)'
  lane :beta do
    build(track: 'beta', default_artifact: 'aab')
    upload_to_play_store(track: 'beta', track_promote_to: 'beta')

    commit_increment = parse_boolean(ENV['FL_COMMIT_INCREMENT'] || 'false')
    commit_and_push if commit_increment
  end

  desc 'Build an application for release'
  lane :release do
    build(track: 'production', default_artifact: 'aab')
    upload_to_play_store

    commit_increment = parse_boolean(ENV['FL_COMMIT_INCREMENT'] || 'false')
    commit_and_push if commit_increment
  end

  desc 'Build Android project'
  private_lane :build do |options|
    project_dir = is_react_native || is_flutter ? 'android/' : './'

    update_build_number(track: options[:track], project_dir:)
    gradle(task: 'clean', project_dir:)

    task = get_build_task(default: options[:default_artifact] || 'aab')
    build_type = ENV['FL_ANDROID_BUILD_TYPE'] || 'Release'
    flavor = ENV['FL_ANDROID_FLAVOR']

    android_env_vars = %w[FL_ANDROID_STORE_FILE FL_ANDROID_STORE_PASSWORD FL_ANDROID_KEY_ALIAS FL_ANDROID_KEY_PASSWORD]
    ensure_env_vars(env_vars: android_env_vars)

    properties = {
      'android.injected.signing.store.file' => ENV['FL_ANDROID_STORE_FILE'],
      'android.injected.signing.store.password' => ENV['FL_ANDROID_STORE_PASSWORD'],
      'android.injected.signing.key.alias' => ENV['FL_ANDROID_KEY_ALIAS'],
      'android.injected.signing.key.password' => ENV['FL_ANDROID_KEY_PASSWORD'],
    }

    build_number = ENV['FL_BUILD_NUMBER']
    properties['fastlane.version.code'] = build_number if build_number

    gradle(task:, build_type:, flavor:, project_dir:, properties:)
  end

  desc 'Increment build number'
  private_lane :update_build_number do |options|
    build_number_env = ENV['FL_BUILD_NUMBER']
    build_number = if build_number_env == 'store' && %w[beta production].include?(options[:track])
                     google_play_track_version_codes(track: options[:track]) + 1
                   else
                     Integer(build_number_env, exception: false)
                   end

    increment_version_code(version_code: build_number, project_dir: options[:project_dir])
  end

  desc 'Get Android build task based on the artifact type: apk, aab'
  private_lane :get_build_task do |options|
    artifact = ENV['FL_ANDROID_ARTIFACT']
    artifact = artifact.downcase.strip
    unless %w[apk aab].include?(artifact)
      UI.important("FL_ANDROID_ARTIFACT set to unknown value '#{artifact}', defaulting to '#{options[:default]}'")
      artifact = options[:default]
    end

    case artifact
    when 'apk'
      'assemble'
    when 'aab'
      'bundle'
    else
      raise "Unreachable statement, artifact type: #{artifact} (fixme)"
    end
  end

  private_lane :commit_and_push do
    project_dir = is_react_native || is_flutter ? 'android/' : './'
    properties_path = File.join(project_dir, 'gradle.properties')
    git_commit(path: [properties_path], message: 'chore: Version bump')
    push_to_git_remote
  end
end

platform :ios do
  desc 'Build an IPA file for development (βeta)'
  lane :beta do
    authenticate
    build(type: 'development')
    upload_to_testflight

    commit_increment = parse_boolean(ENV['FL_COMMIT_INCREMENT'] || 'false')
    commit_and_push if commit_increment
  end

  desc 'Build an IPA file for release (AppStore or Enterprise)'
  lane :release do
    is_enterprise = parse_boolean(ENV['FL_APPLE_ENTERPRISE'] || 'false')

    authenticate
    build(type: is_enterprise ? 'enterprise' : 'appstore')
    UI.message('Skipping upload to AppStore (FL_APPLE_ENTERPRISE is true)') if is_enterprise
    upload_to_app_store unless is_enterprise

    commit_increment = parse_boolean(ENV['FL_COMMIT_INCREMENT'] || 'false')
    commit_and_push if commit_increment
  end

  desc 'Authenticate to Apple'
  private_lane :authenticate do
    ensure_env_vars(env_vars: %w[FL_APPLE_KEY_ID FL_APPLE_KEY_FILE FL_APPLE_ISSUER_ID])
    app_store_connect_api_key(
      key_file_path: ENV['FL_APPLE_KEY_FILE'],
      key_id: ENV['FL_APPLE_KEY_ID'],
      issuer_id: ENV['FL_APPLE_ISSUER_ID'],
      duration: 1200,
      in_house: parse_boolean(ENV['FL_APPLE_ENTERPRISE'] || 'false'),
    )
  end

  desc 'Build iOS project'
  private_lane :build do |options|
    ensure_env_vars(env_vars: %w[FL_IOS_SCHEME])

    xcode_project = find_xcode_project
    type = options[:type]

    provision_certificates(type:)
    update_build_number(type:, xcodeproj: xcode_project)
    gym(scheme: ENV['FL_IOS_SCHEME'], project: xcode_project)
  end

  desc 'Find main iOS XCode Project'
  private_lane :find_xcode_project do
    projects_glob = is_react_native || is_flutter ? './ios/*.xcodeproj' : './**/*.xcodeproj'
    projects = Dir.glob(projects_glob)

    return projects.first if projects.length == 1

    UI.user_error!("Zero or more than one XCode projects found for '#{projects_glob}' (count: #{projects.length})")
  end

  desc 'Fetch certificates and provisioning profiles'
  private_lane :provision_certificates do |options|
    identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    match(app_identifier: identifier, type: options[:type], readonly: is_ci)
  end

  desc 'Increment build number'
  private_lane :update_build_number do |options|
    build_number_env = ENV['FL_BUILD_NUMBER']
    build_number = if build_number_env == 'store' && %w[development appstore].include?(options[:type])
                     live = options[:type] == 'appstore'
                     app_store_build_number(live:) + 1
                   else
                     Integer(build_number_env, exception: false)
                   end

    increment_build_number(build_number:, xcodeproj: options[:xcodeproj])
  end

  desc 'Commit version bump and push'
  private_lane :commit_and_push do
    xcode_project = find_xcode_project
    commit_version_bump(message: 'chore: Version bump', xcodeproj: xcode_project)
    push_to_git_remote
  end
end
