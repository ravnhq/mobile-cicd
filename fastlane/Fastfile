# frozen_string_literal: true

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

before_all do |_, _|
  enforced_branch = ENV['FL_ENFORCED_BRANCH']
  UI.important('Fastlane is being run in a CI service, but no branch was enforced') if is_ci && !enforced_branch

  ensure_git_branch(branch: enforced_branch) if enforced_branch
  ensure_git_status_clean
  git_pull if enforced_branch

  # Optional: Execute extra actions after this line
  # List of all available actions: https://docs.fastlane.tools/actions
end

platform :android do
  desc 'Build an APK file for development (βeta)'
  lane :beta do
  end

  desc 'Build an AAB file for release'
  lane :release do
  end
end

platform :ios do
  desc 'Build an IPA file for development (βeta)'
  lane :beta do
    build(type: 'development')
  end

  desc 'Build an IPA file for release'
  lane :release do
    build(type: 'appstore')
  end

  desc 'Build iOS project'
  private_lane :build do |options|
    xcode_project = find_xcode_project
    provision_certificates(type: options[:type])
    increment_build_number(xcodeproj: xcode_project)

    ios_scheme = ENV['FL_IOS_SCHEME']
    UI.user_error!('No iOS scheme provided (FL_IOS_SCHEME)') unless ios_scheme
    gym(scheme: ios_scheme, project: xcode_project)
  end

  desc 'Fetch certificates and provisioning profiles'
  private_lane :provision_certificates do |options|
    identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    match(app_identifier: identifier, type: options[:type], readonly: is_ci)
  end

  desc 'Find main iOS XCode Project'
  private_lane :find_xcode_project do
    # TODO: Include Flutter here (ex: 'is_flutter')
    glob = is_react_native ? './ios/*.xcodeproj' : './**/*.xcodeproj'
    projects = Dir.glob(glob)

    if projects.length != 1
      UI.user_error!("Zero or more than one XCode projects found for pattern #{glob} (count: #{projects.length})")
    end

    projects.first
  end
end
