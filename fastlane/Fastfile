# frozen_string_literal: true

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

before_all do |_, _|
  enforced_branch = ENV['FL_ENFORCED_BRANCH']
  UI.important('Fastlane is being run in a CI service, but no branch was enforced') if is_ci && !enforced_branch

  ensure_git_branch(branch: enforced_branch) if enforced_branch
  ensure_git_status_clean
  git_pull if enforced_branch

  # Optional: Execute extra actions after this line
  # List of all available actions: https://docs.fastlane.tools/actions
end

platform :android do
  desc 'Build an application for development (βeta)'
  lane :beta do
    build_task = get_build_task(default: 'aab')
    build(build_task:)
  end

  desc 'Build an application for release'
  lane :release do
    build_task = get_build_task(default: 'aab')
    build(build_task:)
  end

  desc 'Build Android project'
  private_lane :build do |options|
    project_dir = is_react_native || is_flutter ? 'android/' : './'
    gradle(task: 'clean', project_dir:)

    android_build_type = ENV['FL_ANDROID_BUILD_TYPE'] || 'Release'
    android_flavor = ENV['FL_ANDROID_FLAVOR']
    android_store_file = ENV['FL_ANDROID_STORE_FILE']
    android_store_password = ENV['FL_ANDROID_STORE_PASSWORD']
    android_key_alias = ENV['FL_ANDROID_KEY_ALIAS']
    android_key_password = ENV['FL_ANDROID_KEY_PASSWORD']

    UI.message('No Android flavor set (FL_ANDROID_FLAVOR was not set)') unless android_flavor
    UI.important('No Android store file set (FL_ANDROID_STORE_FILE was not set)') unless android_store_file
    UI.important('No Android store password set (FL_ANDROID_STORE_PASSWORD was not set)') unless android_store_password
    UI.important('No Android key alias set (FL_ANDROID_KEY_ALIAS was not set)') unless android_key_alias
    UI.important('No Android key password set (FL_ANDROID_KEY_PASSWORD was not set)') unless android_key_password

    gradle(
      task: options[:build_task],
      build_type: android_build_type,
      flavor: android_flavor,
      project_dir:,
      properties: {
        'android.injected.signing.store.file' => android_store_file,
        'android.injected.signing.store.password' => android_store_password,
        'android.injected.signing.key.alias' => android_key_alias,
        'android.injected.signing.key.password' => android_key_password,
      }
    )
  end

  desc 'Get Android build task based on the artifact type: apk, aab'
  private_lane :get_build_task do |options|
    artifact = ENV['FL_ANDROID_ARTIFACT']
    artifact = artifact.downcase.strip
    unless %w[apk aab].include?(artifact)
      UI.important("FL_ANDROID_ARTIFACT set to unknown value '#{artifact}', defaulting to '#{options[:default]}'")
      artifact = options[:default]
    end

    case artifact
    when 'apk'
      'assemble'
    when 'aab'
      'bundle'
    else
      raise "Unreachable statement, artifact type: #{artifact}"
    end
  end
end

platform :ios do
  desc 'Build an IPA file for development (βeta)'
  lane :beta do
    build(type: 'development')
  end

  desc 'Build an IPA file for release'
  lane :release do
    build(type: 'appstore')
  end

  desc 'Build iOS project'
  private_lane :build do |options|
    xcode_project = find_xcode_project
    provision_certificates(type: options[:type])
    increment_build_number(xcodeproj: xcode_project)

    ios_scheme = ENV['FL_IOS_SCHEME']
    UI.user_error!('No iOS scheme provided (FL_IOS_SCHEME was not set)') unless ios_scheme
    gym(scheme: ios_scheme, project: xcode_project)
  end

  desc 'Fetch certificates and provisioning profiles'
  private_lane :provision_certificates do |options|
    identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    match(app_identifier: identifier, type: options[:type], readonly: is_ci)
  end

  desc 'Find main iOS XCode Project'
  private_lane :find_xcode_project do
    projects_glob = is_react_native || is_flutter ? './ios/*.xcodeproj' : './**/*.xcodeproj'
    projects = Dir.glob(projects_glob)

    return projects.first if projects.length == 1

    UI.user_error!("Zero or more than one XCode projects found for '#{projects_glob}' (count: #{projects.length})")
  end
end
